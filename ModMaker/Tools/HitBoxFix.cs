using LibModMaker;
using System;
using System.IO;
using System.Drawing;
using Microsoft.VisualBasic;

namespace ModMaker
{

    /// <summary>
    /// Experimental tool for dealing with hitboxes on models that use the $scale option
    /// </summary>
    public class HitBoxFix : iTool
    {


        private double dblScale;

        public System.Drawing.Image Image
        {
            get { return Properties.Resources.ModMaker.ToBitmap(); }
        }

        public bool IsValidForMod(LibModMaker.SourceMod Game)
        {
            return true;
        }

        public void Launch(LibModMaker.SourceMod Game)
        {
            string QCIPath = Interaction.InputBox("Please enter the path to the hitbox QCI installed", "QCI Path", Game.SourcePath);

            if (!File.Exists(QCIPath))
                return;
            if (!QCIPath.EndsWith(".qci"))
                return;

            string strScale = Interaction.InputBox("Please enter the $scale", "$scale", "1.0");

            this.dblScale = 1.0;

            if (!double.TryParse(strScale, out this.dblScale))
                return;

            this.dblScale = 1.0/this.dblScale;

            SourceFileSystem.BackUpFile(QCIPath);

            string Result = File.ReadAllText(QCIPath);

            Result = Result.Replace("$hbox ", "\r\n$hbox ");

            string[] Lines = Result.Split('\n');

            for (int Index = 0; Index <= Lines.Length - 1; Index++)
            {
                if (Lines[Index].Contains("$hbox "))
                {
                    Lines[Index] = ScaleHitbox(Lines[Index]);
                }
            }

            File.Delete(QCIPath);

            using (FileStream fs = File.OpenWrite(QCIPath))
            {
                using (StreamWriter sr = new StreamWriter(fs))
                {
                    foreach (string Line in Lines)
                    {
                        sr.WriteLine(Line);
                    }

                    sr.Flush();
                }
            }
        }

        public string Name
        {
            get { return "Hit Box Fix"; }
        }

        public string TipText
        {
            get { return "Scale hitboxes generated by model viewer"; }
        }

        private string ScaleHitbox(string Source)
        {
            int LastQuote = Source.IndexOf(ControlChars.Quote) + 1;

            LastQuote = Source.IndexOf(ControlChars.Quote, LastQuote) + 1;

            string Result = Source.Substring(0, LastQuote) + '\t';
            // Source up to the second quote
            string NumberString = Source.Substring(LastQuote);

            NumberString = NumberString.Replace('\t', ' ');

            for (int i = 1; i <= 20; i++)
            {
                NumberString = NumberString.Replace("  ", " ");
            }

            NumberString = NumberString.Trim();

            string[] Numbers = NumberString.Split(' ');

            foreach (string strNumber in Numbers)
            {
                double dblNumber = double.Parse(strNumber);

                dblNumber = dblNumber * this.dblScale;

                Result += dblNumber.ToString("N2") + '\t';
            }

            return Result;
        }
    }

}